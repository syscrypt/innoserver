{
  "consumes": [
    "application/json",
    "multipart/form-data",
    "image/png"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Innoserver",
    "title": "Title:",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "version": "0.0.1"
  },
  "host": "127.0.0.1:5000",
  "basePath": "/",
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Verifies user credentials and generates jw-token",
        "tags": [
          "user"
        ],
        "operationId": "login",
        "parameters": [
          {
            "x-go-name": "User",
            "description": "The user to submit",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tokenResponse"
          },
          "400": {
            "description": " bad request"
          },
          "401": {
            "description": " wrong user credentials"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Persists a user in the database and generates jw-token",
        "tags": [
          "user"
        ],
        "operationId": "register",
        "parameters": [
          {
            "x-go-name": "User",
            "description": "The user to submit",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tokenResponse"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/config": {
      "get": {
        "description": "Returns relevant server settings",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "Configuration",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        }
      }
    },
    "/group/adduser": {
      "post": {
        "description": "Adds a user (if exists) to a group (if exists)",
        "tags": [
          "group"
        ],
        "operationId": "addUserToGroup",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query",
            "required": true
          },
          {
            "x-go-name": "Relation",
            "name": "relation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " user successfully added to group"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/group/create": {
      "post": {
        "description": "Creates a new Group with the requester as admin\nIf public flag is not set, the group remains private",
        "tags": [
          "group"
        ],
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "Info",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "public": {
                  "type": "boolean",
                  "x-go-name": "Public"
                },
                "title": {
                  "type": "string",
                  "x-go-name": "Title"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/uidResponse"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/group/info": {
      "get": {
        "description": "Returns infos about specific group",
        "tags": [
          "group"
        ],
        "operationId": "groupInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/group/listmembers": {
      "get": {
        "description": "Returns a list with all members of specific group",
        "tags": [
          "group"
        ],
        "operationId": "listGroupMembers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/group/setvisibility": {
      "get": {
        "description": "Sets the visibility/publicity for a specific group",
        "tags": [
          "group"
        ],
        "operationId": "setVisibility",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Visibility",
            "name": "public",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " visibility/publicity successfully changed"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/post/get": {
      "get": {
        "description": "Fetch post over unique id",
        "tags": [
          "post"
        ],
        "operationId": "getPost",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UniqueID",
            "name": "uid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": " postBody"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " server internal error"
          }
        }
      }
    },
    "/post/getchildren": {
      "get": {
        "description": "Fetch all subposts of a specific parent post",
        "tags": [
          "post"
        ],
        "operationId": "getChildren",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ParentUid",
            "name": "parent_uid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": " successfully returned a list of subposts"
          }
        }
      }
    },
    "/post/selectlatest": {
      "get": {
        "description": "Fetch all subposts of a specific parent post",
        "tags": [
          "post"
        ],
        "operationId": "fetchLatestPosts",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": " successfully returned a list of first X posts"
          },
          "400": {
            "description": " Query error"
          },
          "500": {
            "description": " Internal error"
          }
        }
      }
    },
    "/post/setoptions": {
      "post": {
        "description": "Set a List of options for a post",
        "tags": [
          "post"
        ],
        "operationId": "setOptions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PostUid",
            "name": "post_uid",
            "in": "query",
            "required": true
          },
          {
            "x-go-name": "Options",
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Option"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": " successfully updated posts options"
          }
        }
      }
    },
    "/post/upload": {
      "post": {
        "description": "\u003cp\u003eTakes, processes and persist posts data\nA post file request model.\nParameter \"Method\" is an integer and takes following numbers:\u003c/p\u003e\n\u003cul\u003e\u003cli\u003e0: 101 Method\u003c/li\u003e\n\u003cli\u003e1: Lotus Blossum\u003c/li\u003e\n\u003cli\u003e2: Scamper\u003c/li\u003e\n\u003cli\u003e3: Diese eine andere, ka...\u003c/li\u003e\u003c/ul\u003e\n\u003cp\u003eType is an integer and describes the file type:\u003c/p\u003e\n\u003cul\u003e\u003cli\u003e0: image\u003c/li\u003e\n\u003cli\u003e1: video\u003c/li\u003e\u003c/ul\u003e",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "post"
        ],
        "operationId": "uploadPost",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupUid",
            "name": "group_uid",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Title",
            "name": "title",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ParentUID",
            "name": "parent_uid",
            "in": "formData"
          },
          {
            "enum": [
              0,
              1,
              2,
              3
            ],
            "type": "integer",
            "format": "int64",
            "x-go-name": "Method",
            "name": "method",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "format": "int64",
            "x-go-name": "Type",
            "name": "type",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "File",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/uidResponse"
          },
          "400": {
            "description": " bad request"
          },
          "500": {
            "description": " internal server error"
          }
        }
      }
    },
    "/swagger": {
      "get": {
        "description": "Returns the swagger specifications",
        "operationId": "swagger",
        "responses": {
          "200": {
            "description": " Swagger specifications"
          }
        }
      }
    }
  },
  "definitions": {
    "Configuration": {
      "description": "A response model for the config endpoint",
      "type": "object",
      "properties": {
        "image_path": {
          "type": "string",
          "x-go-name": "ImagePath"
        },
        "max_image_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxImageSize"
        },
        "max_video_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxVideoSize"
        },
        "video_path": {
          "type": "string",
          "x-go-name": "VideoPath"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    },
    "Group": {
      "description": "Group model",
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "unique_id": {
          "type": "string",
          "x-go-name": "UniqueID"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    },
    "NullInt32": {
      "description": "NullInt32 implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullInt32 represents an int32 that may be null.",
      "properties": {
        "Int32": {
          "type": "integer",
          "format": "int32"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "Option": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    },
    "Post": {
      "description": "A post request model",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "group_id": {
          "$ref": "#/definitions/NullInt32"
        },
        "method": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Method"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          },
          "x-go-name": "Options"
        },
        "parent_id": {
          "$ref": "#/definitions/NullInt32"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        },
        "unique_id": {
          "type": "string",
          "x-go-name": "UniqueID"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    },
    "User": {
      "description": "User model",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "imei": {
          "type": "string",
          "x-go-name": "Imei"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    },
    "UserGroupRelation": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "gitlab.com/innoserver/pkg/model"
    }
  },
  "responses": {
    "errorResponse": {
      "description": "An error response model",
      "headers": {
        "error_message": {
          "type": "string"
        }
      }
    },
    "tokenResponse": {
      "description": "Response for login and register routine",
      "headers": {
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "uidResponse": {
      "description": "A response containing a unique id",
      "headers": {
        "unique_id": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "API_KEY",
      "in": "header"
    },
    "api_token": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "api_token": []
    },
    {
      "api_key": []
    }
  ]
}